snippet logging "logging" b
formatter_info = logging.Formatter('%(message)s')
formatter_debug = logging.Formatter('%(levelname)5s %(module)3s.%(funcName)-10s %(lineno)3s %(message)s')
formatter = logging.Formatter('%(asctime)s  %(message)s', datefmt='%Y-%m-%d %H:%M:%S')

logger = logging.getLogger('${1:appname}')
logger.setLevel(logging.DEBUG)

streamhandler = logging.StreamHandler(sys.stdout)
streamhandler.setLevel(logging.DEBUG)
logger.addHandler(streamhandler)

fileHandler = logging.FileHandler('$1')
fileHandler.setLevel(logging.DEBUG)
logger.addHandler(fileHandler)
endsnippet

snippet argparse "argparse" b

    def parse_args(self):
		parser = argparse.ArgumentParser(description='${1:description}')
		parser.add_argument('-${2:short arg}', '--${3:long arg}',         help="${4:help}", type=int, default=${5:default_value})
		parser.add_argument('-d', '--debug',       help="enable debugging", action='store_true')
		args = parser.parse_args()

		self.$3    = args.$3

		if args.debug:
			logger.setLevel(logging.DEBUG)
			streamhandler.setFormatter(formatter_debug)
		else:
			logger.setLevel(logging.INFO)
			streamhandler.setFormatter(formatter_info)
endsnippet

snippet thread "thread" b
class ${1:threadname}(threading.Thread):
	""" ${2:dockstring} """
    def __init__(self):
        threading.Thread.__init__(self)
        self._stopped = False

    def stop(self):
        self._stopped = True

    def run(self):
        while not self._stopped:
			${3:do stuff}
            time.sleep(0.05)
endsnippet


snippet color "color" b
class Color():
    def colorize(self, string, color):
        colors = {}
        colors['black']    = '\033[0;30m'
        colors['bblack']   = '\033[1;30m'
        colors['red']      = '\033[0;31m'
        colors['bred']     = '\033[1;31m'
        colors['green']    = '\033[0;32m'
        colors['bgreen']   = '\033[1;32m'
        colors['yellow']   = '\033[0;33m'
        colors['byellow']  = '\033[1;33m'
        colors['blue']     = '\033[0;34m'
        colors['bblue']    = '\033[1;34m'
        colors['magenta']  = '\033[0;35m'
        colors['bmagenta'] = '\033[1;35m'
        colors['cyan']     = '\033[0;36m'
        colors['bcyan']    = '\033[1;36m'
        colors['white']    = '\033[0;37m'
        colors['bwhite']   = '\033[1;37m'
        colors['reset']    = '\033[0m'
        colors['default']    = '\033[0m'
        return colors[color] + string + colors["reset"]
endsnippet
